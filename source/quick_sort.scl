S lst int l 
F add(l, 12)
F add(l, 11)
F add(l, 13)
F add(l, 5)
F add(l, 6)
F add(l, 7)
S int n = count(l)


QuickSort(l, 0, n-1)

F Print(l)

#

F QuickSort lst int l, int low, int high
{
	C(low < high)
	{
		S int pivotIndex = Partiton(l, low, high)

		QuickSort(l, low, pivotIndex - 1)
		QuickSort(l, pivotIndex + 1, high)

	}
}

F Partition lst int l, int low, int high: int
{
	S int j = 0
	S int pivot = get(l, high)
	S int i = low - 1

	S j = low
	L(j < high)
	{
		C(get(l, j) <= pivot)
		{
			S i = i + 1
			Swap(l, i, j)
		}
		S j = j + 1
	}
	Swap(l, i + 1, high)
	# i + 1
}

F Swap lst int l, int i, int j
{
	S int temp = get(l, i)
	F set(l, i, get(l, j))
	get(l, j) = S temp
}

F Print lst int l
{
	S int i = 0
	S int s = 0
	L (i < count(l))
	{
		S s = get(l,i)
		O s
		S i = i + 1
	}
}